#!/usr/bin/env bash

#
# H - Secure Hash Generator
# Usage: h <string>
#

# Exit on errors, unset variables, and pipe failures
set -euo pipefail

# Disable history
HISTFILE=/dev/null
HISTSIZE=0
SAVEHIST=0

# Restrictive permissions for new files
umask 077

# Constants
readonly CONF="${HOME}/.h"
readonly REQUIRED_PERMS="600"

# Cleanup handler to clear sensitive variables and temporary files
cleanup() {
    local vars=("SECRET" "INPUT" "TEMP_FILE")
    for var in "${vars[@]}"; do
        if [[ -n "${!var:-}" ]]; then
            eval "$var=''"
            unset "$var"
        fi
    done
    [[ -n "${TEMP_FILE:-}" && -f "$TEMP_FILE" ]] && rm -f "$TEMP_FILE"
}

# Error handler to print message and exit
die() {
    echo "Error: $1" >&2
    cleanup
    exit 1
}

# Add traps for cleanup
trap cleanup EXIT INT TERM

# Check required dependencies
check_dependencies() {
    local deps=("openssl" "stat" "mktemp" "base64")
    for cmd in "${deps[@]}"; do
        if ! command -v "$cmd" &>/dev/null; then
            die "Missing dependency: $cmd"
        fi
    done
}

# Validate file permissions and ownership
validate_file_permissions() {
    local file="$1"
    local perms owner

    # Use stat to get permissions and owner
    if stat --version &>/dev/null; then
        # GNU stat (Linux)
        perms=$(stat -c "%a" "$file")
        owner=$(stat -c "%U" "$file")
    else
        # BSD stat (macOS)
        perms=$(stat -f "%Lp" "$file")
        owner=$(stat -f "%Su" "$file")
    fi

    [[ -L "$file" ]] && die "$file cannot be a symbolic link"
    [[ -f "$file" ]] || die "$file must be a regular file"

    [[ "$perms" == "$REQUIRED_PERMS" ]] || die "Incorrect permissions on $file"
    [[ "$owner" == "$USER" ]] || die "$file must belong to $USER"
}

# Securely initialize the configuration file
init_config() {
    TEMP_FILE=$(mktemp) || die "Failed to create a temporary file"

    if ! dd if=/dev/urandom bs=32 count=1 2>/dev/null | base64 | head -c 32 > "$TEMP_FILE"; then
        die "Failed to generate the secret"
    fi

    mv "$TEMP_FILE" "$CONF" || die "Failed to create $CONF"
    chmod 600 "$CONF" || die "Failed to set permissions on $CONF"
}

# Main hashing function
generate_hash() {
    local input="$1"
    local secret="$2"
    printf "%s++%s" "$input" "$secret" | openssl dgst -sha256 -binary | base64
}

# Main function
main() {
    # Use an empty string if no argument is provided
    local input="${1:-}"

    check_dependencies

    # Initialize configuration file if needed
    [[ -f "$CONF" ]] || init_config

    # Validate configuration file permissions
    validate_file_permissions "$CONF"

    # Securely load the secret
    local secret
    secret=$(<"$CONF") || die "Failed to read the configuration file"
    [[ -n "$secret" ]] || die "Configuration file is empty"

    # Generate and print the hash
    generate_hash "$input" "$secret"
}

# Script entry point
main "$@"
